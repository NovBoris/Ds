# 1. –ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ. –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ, –æ—Ç 1 –¥–æ —Å—Ç–∞,
# –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
# –ö–æ–º–ø—å—é—Ç–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç –ø–æ —Ö–æ–¥—É –∏–≥—Ä—ã, –±—ã–ª–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ.
# –í —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª, —É–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.


# from random import randint
#
#
# def int_game(count: str):
#     if count.isdigit():
#         if int(count) > 10:
#             print('–≠—Ç–æ –º–Ω–æ–≥–æ, —è –¥–∞–º –≤–∞–º 10 –ø–æ–ø—ã—Ç–æ–∫')
#             count = 10
#         elif int(count) < 1:
#             print('–≠—Ç–æ –º–∞–ª–æ, —è –¥–∞–º –≤–∞–º 1 –ø–æ–ø—ã—Ç–∫—É')
#             count = 3
#         else:
#             count = int(count)
#             if count == 1:
#                 print(f'–•–æ—Ä–æ—à–æ, —É —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–∫–∞, —ç—Ç–æ —Å–º–µ–ª–æüßê')
#             elif count in range(2, 5):
#                 print(f'–£ —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–∫–∏')
#             else:
#                 print(f'–£ —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–æ–∫')
#     else:
#         print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
#         return
#     number = randint(1, 10)
#     print(number)
#     for i in range(count):
#         print('-------------------')
#         if count == 1:
#             print('–ü–æ–ø—ã—Ç–∫–∞ –≤—Å–µ–≥–æ 1, –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–µ –±—É–¥–µ—Çüòà')
#         elif i == 0:
#             print('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞')
#         elif count - i > 3:
#             print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, —à–∞–Ω—Å–æ–≤ –µ—â–µ –º–Ω–æ–≥–æüôÑ')
#         elif count - i == 3:
#             print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, —è –Ω–∞—á–∏–Ω–∞—é –∑–∞ —Ç–µ–±—è –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è')
#         elif count - i == 2:
#             print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, –ø—Ä–∞–≤–¥–∞, –ø–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ')
#         elif count - i == 1:
#             print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –¥—Ä—É–≥ –º–æ–π')
#         try:
#             player_number = int(input())
#         except ValueError:
#             print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
#             continue
#         if number == player_number:
#             if count == 1:
#                 print('–ü—Ä–∏–∑–Ω–∞—é, —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Çü§Ø')
#                 break
#             elif count - i == 1:
#                 print('–Ø –ø—Ä–∞–≤–¥–∞ –ø–µ—Ä–µ–∂–∏–≤–∞–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—èüò§')
#                 break
#             else:
#                 print('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–±–µ–¥–∏–ªüòÄ')
#                 break
#         elif number < player_number:
#             print('-------------------'
#                   '\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ')
#         else:
#             print('-------------------'
#                   '\n–°–ª–∏—à–∫–æ–º –º–∞–ª–æ')
#         if count == 1:
#             print('–¢—ã –∫–æ–Ω–µ—á–Ω–æ –∫—Ä—É—Ç, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–ª —Å–µ–±—è, —Å 1 —Ä–∞–∑–∞ —ç—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ–µ\n')
#         elif i == 0:
#             print('–ü–µ—Ä–≤–∞—è –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞, –¥–∞–ª—å—à–µ –ª—É—á—à–µ\n')
#         elif count - i > 3:
#             print(f'–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤—Å–µ –≤–ø–µ—Ä–µ–¥–∏\n')
#         elif count - i == 3:
#             print(f'–≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ —á–µ–º –∫–∞–∂–µ—Ç—Å—è\n')
#         elif count - i == 2:
#             print(f'–ï—â–µ –µ—Å—Ç—å —à–∞–Ω—Å\n')
#         elif count - i == 1:
#             print(f'–¢—ã —Å—Ç–∞—Ä–∞–ª—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑–µ—Ç\n')
#     else:
#         print(f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ªüòû. –ê —á–∏—Å–ª–æ –±—ã–ª–æ {number}')
#
#
# int_game(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ú–∏–Ω–∏–º—É–º 1, –ú–∞–∫—Å–∏–º—É–º 10): '))

# –ö–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏

# ----------------------------------------------------------------------------------------------------------------
# –í–æ–ø—Ä–æ—Å
# –ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ—á–µ–º—É –≤—ã–±–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –≤—Ä–æ–¥–µ –µ—Å–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ url,
# —Ç–æ –æ–Ω –Ω–∞ –Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∏—Ç –∏ –≤—Å–µ –Ω–æ—Ä–º, –Ω–æ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–∂–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç

# import requests
# from bs4 import BeautifulSoup
#
# for i in range(11):
#     if i == 0:
#         url = "https://www.kinoafisha.info/rating/movies/"
#     else:
#         url = f"https://www.kinoafisha.info/rating/movies/?page={i}"
#     print(url)
#     requests = requests.get(url)
#
#     soup = BeautifulSoup(requests.text, "html.parser")
#     cinema = []
#     teme = soup.find_all("a", class_="movieItem_title")
#     print(teme)
#     for temes in teme:
#         cinema.append(temes.text)
#
# print(cinema)
# ----------------------------------------------------------------------------------------------------------------

# –ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏

# –î–µ—Ç—Å–∫–∞—è –∏–≥—Ä–∞ –≤–∏—Å–∏–ª–∏—Ü–∞. –ê–Ω–∞–ª–æ–≥ –ø–æ–ª–µ —á—É–¥–µ—Å, —Ç–æ–∫ –±–µ–∑ –±–∞—Ä–∞–±–∞–Ω–∞ –∏ —Å–µ–∫—Ç–æ—Ä–æ–≤.
# –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –≤–∏–¥–µ –∑–≤–µ–∑–¥–æ—á–µ–∫ –∑–∞ –º–µ—Å—Ç–æ –±—É–∫–≤
# –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –±—É–∫–≤—ã, —É–≥–∞–¥–∞–Ω–Ω–∞—è –±—É–∫–≤–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ —Å–ª–æ–≤–µ.
# –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ–º –∫–æ–ª-–≤–∞ –ø–æ–ø—ã—Ç–æ–∫:)

# from random import choice
# from random_word import RandomWords
#
#
# def str_game():
#     car_brands = ['Audi', 'BMW', 'Ford', 'Honda', 'Hyundai', 'Kia', 'Lada', 'Mazda', 'MercedesBenz',
#                   'Mitsubishi', 'Nissan', 'Renault', 'Skoda', 'Toyota', 'Volkswagen']
#     words = ['–ö–∞–Ω—Ç', '–•—Ä–æ–Ω–∏–∫–∞', '–ó–∞–ª', '–ì–∞–ª–µ—Ä–∞', '–ë–∞–ª–ª', '–í–µ—Å', '–ö–∞—Ñ–µ–ª—å', '–ó–Ω–∞–∫', '–§–∏–ª—å—Ç—Ä', '–ë–∞—à–Ω—è', '–ö–æ–Ω–¥–∏—Ç–µ—Ä',
#              '–û–º–∞—Ä', '–ì–µ–æ–ª–æ–≥', '–ë–∞–ª—å–∑–∞–º', '–ë—Ä–µ–≤–Ω–æ', '–ñ–µ—Ä–¥—å', '–ë–æ—Ä–µ—Ü', '–°–∞–º–æ–≤–∞—Ä', '–ö–∞—Ä–∞–±–∏–Ω', '–ü–æ–¥–ª–æ–∫–æ—Ç–Ω–∏–∫', '–ë–∞—Ä–∞–∫',
#              '–ú–æ—Ç–æ—Ä', '–®–∞—Ä–∂', '–°—É—Å—Ç–∞–≤', '–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä', '–°–∫–≤–æ—Ä–µ—á–Ω–∏–∫', '–ü–æ–¥–ª–æ–¥–∫–∞', '–ó–∞—Ç—ã—á–∫–∞', '–†–µ—Å–Ω–∏—Ü–∞', '–°–ø–∏—á–∫–∞',
#              '–ö–∞–±–∞–Ω', '–ú—É—Ñ—Ç–∞', '–°–∏–Ω–æ–ø—Ç–∏–∫', '–•–∞—Ä–∞–∫—Ç–µ—Ä']
#     english_words = RandomWords()
#     choice_word = input('–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ö–æ—Ç–∏—Ç–µ?: 1. –†—É—Å—Å–∫–∏–µ 2. –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ 3. –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (Eng): ')
#     try:
#         if int(choice_word) not in range(1, 4):
#             print('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç')
#             return
#         if choice_word == '1':
#             word = choice(words).lower()
#         elif choice_word == '3':
#             word = choice(car_brands).lower()
#         else:
#             word = (english_words.get_random_word()).lower()
#         print(word)
#         find_word = '*' * len(word)
#         missed_letters = []
#         correct_letters = []
#         win = False
#
#         def secret_word(s_word):
#             for i in range(len(word)):
#                 if word[i] in correct_letters:
#                     s_word = s_word[:i] + word[i] + s_word[i+1:]
#                     if '*' not in s_word:
#                         nonlocal win
#                         win = True
#             print(s_word)
#
#         choice_count = input('1. –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫? 2. –ò–ª–∏ –Ω–µ—Ç?: ')
#         if int(choice_count) not in range(1, 3):
#             print('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç')
#             return
#         elif choice_count == '1':
#             count = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ')
#             if count.isdigit():
#                 if int(count) > len(word) + 5:
#                     print(f'–≠—Ç–æ –º–Ω–æ–≥–æ, —è –¥—É–º–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫–∏–º: {len(word) + 5}')
#                     count = len(word) + 5
#                 elif int(count) < len(word):
#                     print(f'–≠—Ç–æ –º–∞–ª–æ, —è –¥—É–º–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫–∏–º: {len(word)}')
#                     count = len(word)
#                 else:
#                     print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count}')
#                     count = int(count)
#             else:
#                 print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
#                 return
#         else:
#             count = -1
#     except ValueError:
#         print('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç')
#         return
#     count_timer = count
#     print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ {len(word)}')
#     secret_word(find_word)
#     while count > 0 or count < 0:
#         print('-------------------')
#         if count < 0:
#             print('–î—É–º–∞–π —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å. –ò–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø')
#         elif count_timer == count:
#             print(f'–•–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {count_timer}')
#         elif count - count_timer == count - 1:
#             print(f'–•–æ–¥–æ–≤ {count_timer}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –¥—Ä—É–≥ –º–æ–π')
#         elif count > count_timer:
#             print(f'–•–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {count_timer}, —à–∞–Ω—Å–æ–≤ –µ—â–µ –º–Ω–æ–≥–æüôÑ')
#         player_letter = input('–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ').lower()
#         if player_letter == '—Å—Ç–æ–ø':
#             print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ —É–≥–∞–¥–∞–µ—à—å')
#             break
#         if player_letter in word:
#             if player_letter in correct_letters:
#                 print('–¢—ã —É–∂–µ —É–≥–∞–¥–∞–ª —ç—Ç—É –±—É–∫–≤—É')
#                 continue
#             correct_letters.append(player_letter)
#             secret_word(find_word)
#             print('–¢–∞–∫–∞—è –±—É–∫–≤–∞ –µ—Å—Ç—å')
#             if win:
#                 print('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–±–µ–¥–∏–ªü§Ø')
#                 break
#             continue
#         elif player_letter in missed_letters:
#             print('-------------------'
#                   '\n–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞')
#             print('–¢—ã —É–∂–µ –ø—Ä–æ–ø–æ–±–æ–≤–∞–ª', *missed_letters)
#             count_timer -= 1
#         else:
#             print('-------------------'
#                   '\n–¢–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç')
#             count_timer -= 1
#             missed_letters.append(player_letter)
#         if count_timer == 0:
#             print(f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ªüòû. –ê —Å–ª–æ–≤–æ –±—ã–ª–æ {word}')
#             break
#
#
# str_game()

# –ö–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
# ----------------------------------------------------------------------------------------------------------------


# –ù–∞—á–∞–ª–æ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏

# 3. –°–∏–º—É–ª—è—Ç–æ—Ä –ª–∏—Ñ—Ç–∞. –°—É—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ–Ω—Å–æ–ª—å –≤—ã–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ,
# —á—Ç–æ –≤—ã –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–∂–µ (—ç—Ç–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ —Å–∞–º–∏) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É —ç—Ç–∞–∂–∞, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è/—Å–ø—É—Å—Ç–∏—Ç—å—Å—è,
# –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–µ–º–∞/—Å–ø—É—Å–∫–∞ –º—ã –≤–∏–¥–∏–º –≤ –ø—Ä–∏–Ω—Ç–µ –ø—Ä–æ–µ–∑–∂–∞—é—â–∏–µ —ç—Ç–∞–∂–∏ (—Ü–∏—Ñ—Ä—ã). –î–æ–µ—Ö–∞–≤ –¥–æ –Ω—É–∂–Ω–æ–≥–æ, –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,
# –≥–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –∏ –≤–Ω–æ–≤—å (–∏ —Ç–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∏–ª–∏ –¥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞) –º—ã –º–æ–∂–µ–º —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–∂.
# –í –æ–±—â–µ–º –ª–∏—Ñ—Ç–∏–∫. –°–ª–æ–∂–Ω–æ—Å—Ç—å –µ—â–µ –∏ –≤ —Ç–æ–º, —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–≥–æ –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ 10–≥–æ
# (–µ—Å–ª–∏ –≤ –∑–¥–∞–Ω–∏–∏ 10 —ç—Ç–∞–∂–µ–π)


# from time import sleep
#
#
# class Elevator:
#     def __init__(self, floors=10):
#         self.floors = floors
#         self.elevator_floor = 1
#
#     def go_up_go_down(self, floor):
#         if floor > self.elevator_floor:
#             if floor > self.floors:
#                 floor = self.floors
#             for i in range(self.elevator_floor, floor + 1):
#                 print(f'–≠—Ç–∞–∂ {i}')
#                 sleep(1)
#             self.elevator_floor = floor
#         else:
#             if floor < 1:
#                 floor = 1
#             for i in range(self.elevator_floor, floor - 1, -1):
#                 print(f'–≠—Ç–∞–∂ {i}')
#                 sleep(1)
#             self.elevator_floor = floor
#
#     def __str__(self):
#         return f'–õ–∏—Ñ—Ç —Å–µ–π—á–∞—Å –Ω–∞ {self.elevator_floor} —ç—Ç–∞–∂–µ'
#
#
# x = Elevator()
# print(x)
# x.go_up_go_down(6)
# x.go_up_go_down(15)
# x.go_up_go_down(-6)
# x.go_up_go_down(2)
# print(x.elevator_floor)


# –ö–æ–Ω–µ—Ü —Ç—Ä–µ—Ç–µ–π –∑–∞–¥–∞—á–∏
# ----------------------------------------------------------------------------------------------------------------


# –ù–∞—á–∞–ª–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∑–∞–¥–∞—á–∏

# 4. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –º–æ—Ç–æ—Ü–∏–∫–ª—ã. –ò –º–∏–Ω–∏–º—É–º –¥–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞. –£ —ç—Ç–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ–º–∏–º–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã.
# –≠—Ç–æ —É–≤–µ–ª–µ—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ü–≤–µ—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —É –∫–∞–∂–¥–æ–≥–æ –æ–±—å–µ–∫—Ç–∞ —Ä–∞–∑–Ω—ã–µ,
# –º–µ–Ω—å—à–µ –Ω—É–ª—è —Å–∫–æ—Ä–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—Ç. –í—Å–µ —Ç—Ä–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ,
# —Ç.–µ. –º—ã –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø—Ä—è–º—É—é.
# –ü–æ –ø–æ–≤–æ–¥—É –º–µ—Ç–æ–¥–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ö–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç
# —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ –≤—ã–∑–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º (–Ω–∞ —ç–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–º). –ù–µ –∑–∞—Ö–æ–¥—è –∑–∞ –º–∞–∫—Å–∏–º—É–º.
# –ù—É –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.


# from time import sleep
#
#
# class Motorcycles:
#     __engine = 1
#     __wheels = 2
#     __frame = 1
#     __handlebar = 1
#
#     def __init__(self, max_speed, color):
#         self.__max_speed = max_speed
#         self.__color = color
#         self.__speed = 0
#
#     def increase_speed(self, speed):
#         if speed > self.__speed:
#             if speed > self.__max_speed:
#                 speed = self.__max_speed
#             for i in range(self.__speed, speed, 10):
#                 print(f'–°–∫–æ—Ä–æ—Å—Ç—å {i} –∫–º/—á')
#                 sleep(0.2)
#             self.__speed = speed
#
#     def slow_down(self, speed):
#         if speed < self.__speed:
#             if speed < 0:
#                 speed = 0
#             for i in range(self.__speed, speed, -30):
#                 print(f'–°–∫–æ—Ä–æ—Å—Ç—å {i} –∫–º/—á')
#                 sleep(0.2)
#             self.__speed = speed
#
#     def change_color(self, color):
#         self.__color = color
#
#     def __str__(self):
#         return f'–¶–≤–µ—Ç {self.__color}. –°–∫–æ—Ä–æ—Å—Ç—å {self.__speed} –∫–º/—á'
#
#
# a = Motorcycles(250, 'red')
# b = Motorcycles(200, 'blue')
# print(a)
# a.increase_speed(152)
# a.slow_down(-4124)
# print(a)
# print(b)
# b.change_color('green')
# print(b)

# –ö–æ–Ω–µ—Ü —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∑–∞–¥–∞—á–∏
