from random import randint
import sqlite3
import time


def int_game(player_name: str, count: str):
    start_time = time.time()
    player_count = 0
    win = True
    if count.isdigit():
        if int(count) > 10:
            print('–≠—Ç–æ –º–Ω–æ–≥–æ, —è –¥–∞–º –≤–∞–º 10 –ø–æ–ø—ã—Ç–æ–∫')
            count = 10
        elif int(count) < 1:
            print('–≠—Ç–æ –º–∞–ª–æ, —è –¥–∞–º –≤–∞–º 1 –ø–æ–ø—ã—Ç–∫—É')
            count = 3
        else:
            count = int(count)
            if count == 1:
                print(f'–•–æ—Ä–æ—à–æ, —É —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–∫–∞, —ç—Ç–æ —Å–º–µ–ª–æüßê')
            elif count in range(2, 5):
                print(f'–£ —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–∫–∏')
            else:
                print(f'–£ —Ç–µ–±—è {count} –ø–æ–ø—ã—Ç–æ–∫')
    else:
        print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        return
    number = randint(1, 10)
    print(number)
    for i in range(count):
        player_count += 1
        print('-------------------')
        if count == 1:
            print('–ü–æ–ø—ã—Ç–∫–∞ –≤—Å–µ–≥–æ 1, –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–µ –±—É–¥–µ—Çüòà')
        elif i == 0:
            print('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞')
        elif count - i > 3:
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, —à–∞–Ω—Å–æ–≤ –µ—â–µ –º–Ω–æ–≥–æüôÑ')
        elif count - i == 3:
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, —è –Ω–∞—á–∏–Ω–∞—é –∑–∞ —Ç–µ–±—è –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è')
        elif count - i == 2:
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, –ø—Ä–∞–≤–¥–∞, –ø–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ')
        elif count - i == 1:
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {i + 1}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –¥—Ä—É–≥ –º–æ–π')
        try:
            player_number = int(input())
        except ValueError:
            print('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
            continue
        if number == player_number:
            if count == 1:
                print(f'–ü—Ä–∏–∑–Ω–∞—é, —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Çü§Ø. –¢—ã —Å–¥–µ–ª–∞–ª {player_count} –ø–æ–ø—ã—Ç–æ–∫.')
                total_time = round((time.time() - start_time), 5)
                break
            elif count - i == 1:
                print(f'–Ø –ø—Ä–∞–≤–¥–∞ –ø–µ—Ä–µ–∂–∏–≤–∞–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—èüò§. –¢—ã —Å–¥–µ–ª–∞–ª {player_count} –ø–æ–ø—ã—Ç–æ–∫.')
                total_time = round((time.time() - start_time), 5)
                break
            else:
                print(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–±–µ–¥–∏–ªüòÄ. –¢—ã —Å–¥–µ–ª–∞–ª {player_count} –ø–æ–ø—ã—Ç–æ–∫.')
                total_time = round((time.time() - start_time), 5)
                break
        elif number < player_number:
            print('-------------------'
                  '\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ')
        else:
            print('-------------------'
                  '\n–°–ª–∏—à–∫–æ–º –º–∞–ª–æ')
        if count == 1:
            print('–¢—ã –∫–æ–Ω–µ—á–Ω–æ –∫—Ä—É—Ç, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–ª —Å–µ–±—è, —Å 1 —Ä–∞–∑–∞ —ç—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ–µ\n')
        elif i == 0:
            print('–ü–µ—Ä–≤–∞—è –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞, –¥–∞–ª—å—à–µ –ª—É—á—à–µ\n')
        elif count - i > 3:
            print(f'–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤—Å–µ –≤–ø–µ—Ä–µ–¥–∏\n')
        elif count - i == 3:
            print(f'–≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ —á–µ–º –∫–∞–∂–µ—Ç—Å—è\n')
        elif count - i == 2:
            print(f'–ï—â–µ –µ—Å—Ç—å —à–∞–Ω—Å\n')
        elif count - i == 1:
            print(f'–¢—ã —Å—Ç–∞—Ä–∞–ª—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑–µ—Ç\n')
    else:
        print(f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ªüòû. –ê —á–∏—Å–ª–æ –±—ã–ª–æ {number}. –¢—ã —Å–¥–µ–ª–∞–ª {player_count} –ø–æ–ø—ã—Ç–æ–∫.')
        win = False
        total_time = round((time.time() - start_time), 5)

    def data_base():
        with sqlite3.connect('LeaderBoard.db') as con:
            cur = con.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER,
            name TEXT,
            score INTEGER,
            time NUMERIC,
            PRIMARY KEY("id" AUTOINCREMENT)
            )""")
            if win:
                cur.execute("""INSERT INTO users (name, score, time) VALUES(?, ?, ?)""",
                            (player_name, player_count, total_time))
                # SELECT expressions
                # FROM tables
                # [WHERE conditions]
                # [ORDER BY expression[ASC | DESC]]
                # LIMIT number_rows[OFFSET offset_value];
            cur.execute("""SELECT name, score, time
                        FROM users
                        ORDER BY score, time ASC
                        LIMIT 3
                        """)
            result = cur.fetchall()
            print(f'–ù–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', result)
            cur.execute("""SELECT name, score, time
                        FROM users
                        ORDER BY score, time ASC
                        """)
            result = cur.fetchall()
            print(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤', *result, sep='\n')
            cur.execute("SELECT * FROM users")
            result = cur.fetchall()
            print('–¢–æ–ø 3 –∏–≥—Ä–æ–∫–∞')
            [print(*sorted(result, key=lambda el: int(el[2]) and int(el[3]))[_][1:4]) for _ in range(3)]
    data_base()


int_game(input('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: '), input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ú–∏–Ω–∏–º—É–º 1, –ú–∞–∫—Å–∏–º—É–º 10): '))
